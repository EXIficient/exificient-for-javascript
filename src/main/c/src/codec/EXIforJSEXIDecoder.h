/*
 * Copyright (C) 2007-2016 Siemens AG
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, 
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/*******************************************************************
 *
 * @author Daniel.Peintner.EXT@siemens.com
 * @version 2016-10-20 
 * @contact Joerg.Heuer@siemens.com
 *
 * <p>Code generated by EXIdizer</p>
 * <p>Schema: exi4js.xsd.</p>
 *
 *
 ********************************************************************/



/**
* \file 	EXIDecoder.h
* \brief 	EXI Decoder
*
*/

#ifndef EXI_EXIforJS_DECODER_H
#define EXI_EXIforJS_DECODER_H

#ifdef __cplusplus
extern "C" {
#endif

#include "EXITypes.h"

/**
 * \brief 		Initialize EXI decoder
 *
 *         		Resets & initializes the EXI decoder.
 *
 * \param       stream   		Input Stream
 * \param       state   		Codec state
 * \param       runtimeTable   	Runtime name-tables
 * \param       stringTable   	String table
 * \return                  	Error-Code <> 0
 *
 */
int exiEXIforJSInitDecoder(bitstream_t* stream, exi_state_t* state,
		exi_name_table_runtime_t* runtimeTable, exi_value_string_table_t* stringTable);


/**
 * \brief 		Reports last decoded qualified name
 *
 *         		Note: Qualified name only available for previously unknown qname. Otherwise make use of name table entries.
 *
 * \param       qname   		Qualified name
 * \return                  	Error-Code <> 0
 *
 */
int exiEXIforJSGetLastQName(exi_qname_t** qname);


/**
 * \brief 		Decodes next event
 *
 * 				Inspects EXI stream and decodes next EXI event.
 *
 * \param       stream   		Input Stream
 * \param       state   		Codec state
 * \param       nextEvent   	Next event
 * \return                  	Error-Code <> 0
 *
 */
int exiEXIforJSDecodeNextEvent(bitstream_t* stream,
		exi_state_t* state, exi_event_t* nextEvent);


/**
 * \brief 		Decodes StartDocument (SD) event
 *
 * \param       stream   		Input Stream
 * \param       state   		Codec state
 * \return                  	Error-Code <> 0
 *
 */
int exiEXIforJSDecodeStartDocument(bitstream_t* stream,
		exi_state_t* state);

/**
 * \brief 		Decodes EndDocument (ED) event
 *
 * \param       stream   		Input Stream
 * \param       state   		Codec state
 * \return                  	Error-Code <> 0
 *
 */
int exiEXIforJSDecodeEndDocument(bitstream_t* stream,
		exi_state_t* state);

/**
 * \brief 		Decodes StartElement (SE) event
 *
 * 				Note: The first time a qnameID is larger than schema-informed NUMBER_OF_QNAMES it is possible to retrieve the qname by calling GetLastQName(...).
 * 				It is up to the caller to track qnames.
 *
 * \param       stream   		Input Stream
 * \param       state   		Codec state
 * \param       namespaceUriID  Qualified Namespace ID
 * \param       localNameID  	Qualified LocalName ID
 * \return                  	Error-Code <> 0
 *
 */
int
exiEXIforJSDecodeStartElement(bitstream_t* stream,
		exi_state_t* state, size_t* namespaceUriID, size_t* localNameID);


/**
 * \brief 		Decodes EndElement (EE) event
 *
 * \param       stream   		Input Stream
 * \param       state   		Codec state
 * \param       namespaceUriID  Qualified Namespace ID
 * \param       localNameID  	Qualified LocalName ID
 * \return                  	Error-Code <> 0
 *
 */
int exiEXIforJSDecodeEndElement(bitstream_t* stream,
		exi_state_t* state, size_t* namespaceUriID, size_t* localNameID);


/**
 * \brief 		Decodes Characters (CH) event.
 *
 * 				Reports characters value.
 *
 * \param       stream   		Input Stream
 * \param       state   		Codec state
 * \param       val		   		Characters value
 * \return                  	Error-Code <> 0
 *
 */
int exiEXIforJSDecodeCharacters(bitstream_t* stream,
		exi_state_t* state, exi_value_t* val);


/**
 * \brief 		Decodes Attribute (AT) event.
 *
 * 				Reports attribute qname and value.
 *
 * \param       stream   		Input Stream
 * \param       state   		Codec state
 * \param       namespaceUriID  Qualified Namespace ID
 * \param       localNameID  	Qualified LocalName ID
 * \param       val		   		Characters value
 * \return                  	Error-Code <> 0
 *
 */
int exiEXIforJSDecodeAttribute(bitstream_t* stream,
		exi_state_t* state, size_t* namespaceUriID, size_t* localNameID, exi_value_t* val);


/**
 * \brief 		Decodes attribute xsi:nil
 *
 * 				Reports value.
 *
 * \param       stream   		Input Stream
 * \param       state   		Codec state
 * \param       val		   		Characters value
 * \return                  	Error-Code <> 0
 *
 */
int exiEXIforJSDecodeAttributeXsiNil(bitstream_t* stream,
		exi_state_t* state, exi_value_t* val);


/**
 * \brief 		Decodes attribute xsi:type
 *
 * 				Reports value.
 *
 * \param       stream   		Input Stream
 * \param       state   		Codec state
 * \param       val		   		Characters value
 * \return                  	Error-Code <> 0
 *
 */
int exiEXIforJSDecodeAttributeXsiType(bitstream_t* stream,
		exi_state_t* state, exi_value_t* val);


/**
 * \brief 		Decodes attribute/characters list value
 *
 * 				List values are special and are processed one by one.
 *
 * \param       stream   		Input Stream
 * \param       state   		Codec state
 * \param       qnameID   		Qualified Name ID
 * \param       val		   		List value
 * \param       lt		   		List type
 * \return                  	Error-Code <> 0
 *
 */
int exiEXIforJSDecodeListValue(bitstream_t* stream, exi_state_t* state, size_t namespaceUriID, size_t localNameID,
		exi_value_t* val, exi_list_t lt);

#ifdef __cplusplus
}
#endif

#endif
